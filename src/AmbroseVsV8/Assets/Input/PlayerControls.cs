//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""CombatControls"",
            ""id"": ""7a5321ed-cc5b-456d-945a-ee389c1b749b"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // CombatControls
        m_CombatControls = asset.FindActionMap("CombatControls", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CombatControls
    private readonly InputActionMap m_CombatControls;
    private List<ICombatControlsActions> m_CombatControlsActionsCallbackInterfaces = new List<ICombatControlsActions>();
    public struct CombatControlsActions
    {
        private @PlayerControls m_Wrapper;
        public CombatControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_CombatControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICombatControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatControlsActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(ICombatControlsActions instance)
        {
        }

        public void RemoveCallbacks(ICombatControlsActions instance)
        {
            if (m_Wrapper.m_CombatControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatControlsActions @CombatControls => new CombatControlsActions(this);
    public interface ICombatControlsActions
    {
    }
}
